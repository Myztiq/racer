// Generated by CoffeeScript 1.3.3
(function() {
  var Car, b2AABB, b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2Fixture, b2FixtureDef, b2MassData, b2MouseJointDef, b2PolygonShape, b2PrismaticJoint, b2RevoluteJointDef, b2Vec2, b2World, startPosition,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2AABB = Box2D.Collision.b2AABB;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2World = Box2D.Dynamics.b2World;

  b2MassData = Box2D.Collision.Shapes.b2MassData;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef;

  b2PrismaticJoint = Box2D.Dynamics.Joints.b2PrismaticJointDef;

  b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;

  startPosition = {
    x: 10,
    y: 10,
    angle: Math.PI
  };

  Car = (function() {

    function Car(world) {
      this.update = __bind(this.update, this);

      this.reset = __bind(this.reset, this);

      var axle1, axle2, bodyDef, boxDef, car, circleDef, prismaticJointDef, revoluteJointDef, wheel1, wheel2;
      boxDef = new b2FixtureDef;
      boxDef.density = 1.0;
      boxDef.friction = 0.5;
      boxDef.restitution = 0.2;
      boxDef.filter.groupIndex = -1;
      bodyDef = new b2BodyDef;
      bodyDef.type = b2Body.b2_dynamicBody;
      bodyDef.position.x = startPosition.x;
      bodyDef.position.y = startPosition.y;
      bodyDef.angle = startPosition.angle;
      this.carBody = car = world.CreateBody(bodyDef);
      boxDef.shape = new b2PolygonShape;
      boxDef.shape.SetAsBox(1.5, 0.3);
      car.CreateFixture(boxDef);
      boxDef.shape.SetAsOrientedBox(0.4, 0.15, new b2Vec2(-1, -0.3), Math.PI / 3);
      car.CreateFixture(boxDef);
      boxDef.shape.SetAsOrientedBox(0.4, 0.15, new b2Vec2(1, -0.3), -Math.PI / 3);
      car.CreateFixture(boxDef);
      boxDef.density = 1;
      axle1 = world.CreateBody(bodyDef);
      boxDef.shape.SetAsOrientedBox(0.4, 0.1, new b2Vec2(-1 - 0.6 * Math.cos(Math.PI / 3), -0.3 - 0.6 * Math.sin(Math.PI / 3)), Math.PI / 3);
      axle1.CreateFixture(boxDef);
      axle2 = world.CreateBody(bodyDef);
      boxDef.shape.SetAsOrientedBox(0.4, 0.1, new b2Vec2(1 + 0.6 * Math.cos(-Math.PI / 3), -0.3 + 0.6 * Math.sin(-Math.PI / 3)), -Math.PI / 3);
      axle2.CreateFixture(boxDef);
      prismaticJointDef = new b2PrismaticJoint();
      prismaticJointDef.Initialize(car, axle1, axle1.GetWorldCenter(), new b2Vec2(Math.cos(Math.PI / 3), Math.sin(Math.PI / 3)));
      prismaticJointDef.lowerTranslation = -0.3;
      prismaticJointDef.upperTranslation = 0.5;
      prismaticJointDef.enableLimit = true;
      prismaticJointDef.enableMotor = true;
      this.spring1 = world.CreateJoint(prismaticJointDef);
      prismaticJointDef.Initialize(car, axle2, axle2.GetWorldCenter(), new b2Vec2(-Math.cos(Math.PI / 3), Math.sin(Math.PI / 3)));
      this.spring2 = world.CreateJoint(prismaticJointDef);
      circleDef = new b2FixtureDef;
      circleDef.radius = 0.7;
      circleDef.density = 0.1;
      circleDef.friction = 5;
      circleDef.restitution = 0.2;
      circleDef.filter.groupIndex = -1;
      circleDef.shape = new b2CircleShape(.7);
      bodyDef.allowSleep = false;
      bodyDef.position.Set(axle1.GetWorldCenter().x + 0.3 * Math.cos(Math.PI / 3), axle1.GetWorldCenter().y + 0.3 * Math.sin(Math.PI / 3));
      wheel1 = world.CreateBody(bodyDef);
      wheel1.CreateFixture(circleDef);
      bodyDef.position.Set(axle2.GetWorldCenter().x - 0.3 * Math.cos(-Math.PI / 3), axle2.GetWorldCenter().y - 0.3 * Math.sin(-Math.PI / 3));
      wheel2 = world.CreateBody(bodyDef);
      wheel2.CreateFixture(circleDef);
      revoluteJointDef = new b2RevoluteJointDef();
      revoluteJointDef.enableMotor = true;
      revoluteJointDef.Initialize(axle1, wheel1, wheel1.GetWorldCenter());
      this.motor1 = world.CreateJoint(revoluteJointDef);
      revoluteJointDef.Initialize(axle2, wheel2, wheel2.GetWorldCenter());
      this.motor2 = world.CreateJoint(revoluteJointDef);
    }

    Car.prototype.reset = function() {
      this.carBody.SetPositionAndAngle(new b2Vec2(startPosition.x, startPosition.y), startPosition.angle);
      this.carBody.SetLinearVelocity(new b2Vec2(0, 0));
      return this.carBody.SetAngularVelocity(0);
    };

    Car.prototype.update = function(controls) {
      var direction, tension, torque;
      tension = 300;
      this.spring1.SetMaxMotorForce(30 + Math.abs(tension * Math.pow(this.spring1.GetJointTranslation(), 2)));
      this.spring1.SetMotorSpeed((this.spring1.GetMotorSpeed() - 10 * this.spring1.GetJointTranslation()) * 0.4);
      this.spring2.SetMaxMotorForce(20 + Math.abs(tension * Math.pow(this.spring2.GetJointTranslation(), 2)));
      this.spring2.SetMotorSpeed(-4 * Math.pow(this.spring2.GetJointTranslation(), 1));
      direction = 0;
      if (controls.forward.down) {
        direction = -1;
      }
      if (controls.backward.down) {
        direction = 1;
      }
      if (controls.forward.down && controls.backward.down) {
        direction = 0;
      }
      torque = 16;
      if (direction === 0) {
        torque = .5;
      }
      this.motor1.SetMotorSpeed(15 * Math.PI * direction);
      this.motor1.SetMaxMotorTorque(torque);
      this.motor2.SetMotorSpeed(15 * Math.PI * direction);
      return this.motor2.SetMaxMotorTorque(torque);
    };

    return Car;

  })();

  window.Car = Car;

}).call(this);
