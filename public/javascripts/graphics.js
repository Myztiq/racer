// Generated by CoffeeScript 1.3.3
(function() {
  var Graphics,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Graphics = (function() {

    function Graphics() {
      this.update = __bind(this.update, this);

      this.trackObject = __bind(this.trackObject, this);
      this.tracking = {};
      this.stage = new createjs.Stage("drawing");
    }

    Graphics.prototype.trackObject = function(easelObject, box2dObject, _arg) {
      var isCameraObject, trackingID, _ref;
      _ref = _arg != null ? _arg : {}, isCameraObject = _ref.isCameraObject, trackingID = _ref.trackingID;
      isCameraObject || (isCameraObject = false);
      trackingID || (trackingID = Math.random());
      if (isCameraObject) {
        this.cameraObj = box2dObject;
      }
      this.tracking[trackingID] = {
        easel: easelObject,
        box2d: box2dObject
      };
      this.stage.addChild(easelObject);
      return trackingID;
    };

    Graphics.prototype.removeTracking = function(id) {
      var obj;
      obj = this.tracking[id];
      if (obj != null) {
        this.stage.removeChild(this.tracking[id].easel);
        return delete this.tracking[id];
      } else {
        return console.log("Tracking object with ID " + id + " does not exist");
      }
    };

    Graphics.prototype.update = function(objToTrack, ctx) {
      var key, obj, oldX, oldY, _ref;
      _ref = this.tracking;
      for (key in _ref) {
        obj = _ref[key];
        obj.easel.x = obj.box2d.GetWorldCenter().x * scale;
        obj.easel.y = obj.box2d.GetWorldCenter().y * scale;
        if (!obj.easel.regRotation) {
          obj.easel.regRotation = 0;
        }
        obj.easel.rotation = (obj.box2d.GetAngle() + obj.easel.regRotation) * (180 / Math.PI);
      }
      if (this.cameraObj != null) {
        oldX = this.stage.x;
        oldY = this.stage.y;
        this.stage.x = this.cameraObj.GetPosition().x * -scale + 200;
        this.stage.y = this.cameraObj.GetPosition().y * -scale + 200;
        ctx.translate(this.stage.x, this.stage.y);
      }
      return this.stage.update();
    };

    return Graphics;

  })();

  window.Graphics = Graphics;

}).call(this);
